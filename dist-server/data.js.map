{"version":3,"sources":["../server/data.js"],"names":["addSession","getSession","addNotifier","getEvents","_sessions","_notifiers","event","events","config","silent","console","log","process","env","RABBITMQ_URL","_printError","err","message","_gotEvent","body","sensorId","sensorType","sensorLat","sensorLng","sensorState","unshift","forEach","notifier","_connection","createConnection","url","token","data","type","cb","push","filters","Promise","resolve","filter","Object","keys","some"],"mappings":";;;;;;QA4CgBA,U,GAAAA,U;QAIAC,U,GAAAA,U;QAIAC,W,GAAAA,W;QAIAC,S,GAAAA,S;;AAxDhB;;;;AACA;;;;;;AAEA,IAAMC,YAAY,EAAlB;AACA,IAAMC,aAAa;AACjBC,SAAO;AADU,CAAnB;;AAIO,IAAMC,0BAAS,EAAf;;AAEP,iBAAOC,MAAP,CAAc,EAACC,QAAQ,IAAT,EAAd;AACAC,QAAQC,GAAR,CAAY,mBAAiBC,QAAQC,GAAR,CAAYC,YAAzC;;AAEA,IAAIC,cAAc,SAAdA,WAAc,CAAUC,GAAV,EAAe;AAC/BN,UAAQC,GAAR,CAAYK,IAAIC,OAAhB;AACD,CAFD;;AAIA,IAAIC,YAAY,SAAZA,SAAY,CAAUZ,KAAV,EAAiB;AAC/BI,UAAQC,GAAR,CAAY,YAAUL,MAAMa,IAAN,CAAWC,QAArB,GAA8B,GAA9B,GAAkCd,MAAMa,IAAN,CAAWE,UAA7C,GAAwD,IAAxD,GAA6Df,MAAMa,IAAN,CAAWG,SAAxE,GAAkF,IAAlF,GAAuFhB,MAAMa,IAAN,CAAWI,SAAlG,GAA4G,KAA5G,GAAkHjB,MAAMa,IAAN,CAAWK,WAAzI;AACD;AACA;;AAECjB,SAAOkB,OAAP,CAAenB,MAAMa,IAArB;AACAd,aAAWC,KAAX,CAAiBoB,OAAjB,CAAyB;AAAA,WAAYC,SAASrB,KAAT,CAAZ;AAAA,GAAzB;AACD,CAPD;;AASA,IAAMsB,cAAc,eAAKC,gBAAL,CAAsB,EAAEC,KAAMlB,QAAQC,GAAR,CAAYC,YAApB,EAAtB,CAApB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,SAASd,UAAT,CAAoB+B,KAApB,EAA2BC,IAA3B,EAAiC;AACtC5B,YAAU2B,KAAV,IAAmBC,IAAnB;AACD;;AAEM,SAAS/B,UAAT,CAAoB8B,KAApB,EAA2B;AAChC,SAAO3B,UAAU2B,KAAV,CAAP;AACD;;AAEM,SAAS7B,WAAT,CAAqB+B,IAArB,EAA2BC,EAA3B,EAA+B;AACpC7B,aAAW4B,IAAX,EAAiBE,IAAjB,CAAsBD,EAAtB;AACD;;AAEM,SAAS/B,SAAT,CAAmBiC,OAAnB,EAA4B;AACjC,MAAIA,OAAJ,EAAa;AACX,WAAOC,QAAQC,OAAR,CAAgB;AACrB/B,cAAQA,OAAOgC,MAAP,CAAc;AAAA,eACpBC,OAAOC,IAAP,CAAYL,OAAZ,EAAqBM,IAArB,CAA0B;AAAA,iBAAUpC,MAAMiC,MAAN,MAAkBH,QAAQG,MAAR,CAA5B;AAAA,SAA1B,CADoB;AAAA,OAAd;AADa,KAAhB,CAAP;AAKD;AACD,SAAOF,QAAQC,OAAR,CAAgB,EAAE/B,cAAF,EAAhB,CAAP;AACD;;kBAEc,EAAEL,wBAAF,EAAeF,sBAAf,EAA2BC,sBAA3B,EAAuCE,oBAAvC,E","file":"data.js","sourcesContent":["import amqp from 'amqp';\nimport dotenv from 'dotenv';\n\nconst _sessions = {};\nconst _notifiers = {\n  event: []\n};\n\nexport const events = [];\n\ndotenv.config({silent: true});\nconsole.log('RABBITMQ_URL: '+process.env.RABBITMQ_URL);\n\nvar _printError = function (err) {\n  console.log(err.message);\n};\n\nvar _gotEvent = function (event) {\n  console.log('event> '+event.body.sensorId+'.'+event.body.sensorType+' ('+event.body.sensorLat+', '+event.body.sensorLng+'): '+event.body.sensorState);\n // console.log(JSON.stringify(message.body));\n // console.log('');\n\n  events.unshift(event.body);\n  _notifiers.event.forEach(notifier => notifier(event));\n};\n\nconst _connection = amqp.createConnection({ url:  process.env.RABBITMQ_URL});\n// const _connection = amqp.createConnection({ url: \"amqp://uicR37SEDpTnQ:pH0HTOPmHf917@195.69.209.29:25001/vb7ac1138d0ae48db9530655b19db61f0\"});\n\n// const _client = Client.fromConnectionString(_connectionString);\n//\n// _client.open()\n//     .then(_client.getPartitionIds.bind(_client))\n//     .then(function (partitionIds) {\n//         return partitionIds.map(function (partitionId) {\n//             return _client.createReceiver('$Default', partitionId, { 'startAfterTime' : Date.now()-2*24*60*60*1000}).then(function(receiver) {\n//                 console.log('Created partition receiver: ' + partitionId)\n//                 receiver.on('errorReceived', _printError);\n//                 receiver.on('message', _gotEvent);\n//             });\n//         });\n//     })\n//     .catch(_printError);\n\nexport function addSession(token, data) {\n  _sessions[token] = data;\n}\n\nexport function getSession(token) {\n  return _sessions[token];\n}\n\nexport function addNotifier(type, cb) {\n  _notifiers[type].push(cb);\n}\n\nexport function getEvents(filters) {\n  if (filters) {\n    return Promise.resolve({\n      events: events.filter(event =>\n        Object.keys(filters).some(filter => event[filter] === filters[filter])\n      )\n    });\n  }\n  return Promise.resolve({ events });\n}\n\nexport default { addNotifier, addSession, getSession, getEvents };\n"]}