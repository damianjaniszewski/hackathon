{"version":3,"sources":["../server/data.js"],"names":["addSession","getSession","addNotifier","getEvents","_sessions","_notifiers","event","events","config","silent","_printError","err","console","log","message","_gotEvent","eventTime","unshift","forEach","notifier","_connection","createConnection","url","process","env","RABBITMQ_URL","on","e","queue","durable","autoDelete","exclusive","q","bind","subscribe","Date","now","data","toString","token","type","cb","push","Promise","resolve"],"mappings":";;;;;;QAqCgBA,U,GAAAA,U;QAIAC,U,GAAAA,U;QAIAC,W,GAAAA,W;QAIAC,S,GAAAA,S;;AAjDhB;;;;AACA;;;;;;AAEA,IAAMC,YAAY,EAAlB;AACA,IAAMC,aAAa;AACjBC,SAAO;AADU,CAAnB;;AAIO,IAAMC,0BAAS,EAAf;;AAEP,iBAAOC,MAAP,CAAc,EAACC,QAAQ,IAAT,EAAd;AACA;;AAEA,IAAIC,cAAc,SAAdA,WAAc,CAAUC,GAAV,EAAe;AAC/BC,UAAQC,GAAR,CAAYF,IAAIG,OAAhB;AACD,CAFD;;AAIA,IAAIC,YAAY,SAAZA,SAAY,CAAUT,KAAV,EAAiB;AAC/B;AACAM,UAAQC,GAAR,CAAY,YAAYP,MAAMU,SAAlB,GAA8B,GAA9B,GAAoCV,MAAMQ,OAAtD;;AAEAP,SAAOU,OAAP,CAAeX,KAAf;AACAD,aAAWC,KAAX,CAAiBY,OAAjB,CAAyB;AAAA,WAAYC,SAASb,KAAT,CAAZ;AAAA,GAAzB;AACD,CAND;;AAQA,IAAMc,cAAc,eAAKC,gBAAL,CAAsB,EAAEC,KAAKC,QAAQC,GAAR,CAAYC,YAAnB,EAAtB,EACjBC,EADiB,CACd,OADc,EACL;AAAA,SAAKhB,YAAYiB,CAAZ,CAAL;AAAA,CADK,EAEjBD,EAFiB,CAEd,OAFc,EAEL,YAAM;AACjB;AACAN,cAAYQ,KAAZ,CAAkB,UAAlB,EAA8B,EAACC,SAAS,IAAV,EAAgBC,YAAY,KAA5B,EAAmCC,WAAW,KAA9C,EAA9B,EAAoF,aAAK;AACvF;AACAC,MAAEC,IAAF,CAAO,GAAP;AACA;AACAD,MAAEE,SAAF,CAAY;AAAA,aAAWnB,UAAU,EAACC,WAAWmB,KAAKC,GAAL,EAAZ,EAAwBtB,SAASA,QAAQuB,IAAR,CAAaC,QAAb,CAAsB,MAAtB,CAAjC,EAAV,CAAX;AAAA,KAAZ;AACD,GALD;AAMD,CAViB,CAApB;;AAYO,SAAStC,UAAT,CAAoBuC,KAApB,EAA2BF,IAA3B,EAAiC;AACtCjC,YAAUmC,KAAV,IAAmBF,IAAnB;AACD;;AAEM,SAASpC,UAAT,CAAoBsC,KAApB,EAA2B;AAChC,SAAOnC,UAAUmC,KAAV,CAAP;AACD;;AAEM,SAASrC,WAAT,CAAqBsC,IAArB,EAA2BC,EAA3B,EAA+B;AACpCpC,aAAWmC,IAAX,EAAiBE,IAAjB,CAAsBD,EAAtB;AACD;;AAEM,SAAStC,SAAT,GAAqB;AAC1B,SAAOwC,QAAQC,OAAR,CAAgB,EAAErC,cAAF,EAAhB,CAAP;AACD;;kBAEc,EAAEL,wBAAF,EAAeF,sBAAf,EAA2BC,sBAA3B,EAAuCE,oBAAvC,E","file":"data.js","sourcesContent":["import amqp from 'amqp';\nimport dotenv from 'dotenv';\n\nconst _sessions = {};\nconst _notifiers = {\n  event: []\n};\n\nexport const events = [];\n\ndotenv.config({silent: true});\n// console.log('RABBITMQ_URL: '+process.env.RABBITMQ_URL);\n\nvar _printError = function (err) {\n  console.log(err.message);\n};\n\nvar _gotEvent = function (event) {\n  // Print messages to stdout\n  console.log('event> ' + event.eventTime + ' ' + event.message);\n\n  events.unshift(event);\n  _notifiers.event.forEach(notifier => notifier(event));\n};\n\nconst _connection = amqp.createConnection({ url: process.env.RABBITMQ_URL })\n  .on('error', e => _printError(e))\n  .on('ready', () => {\n    // Use the default 'amq.topic' exchange\n    _connection.queue('messages', {durable: true, autoDelete: false, exclusive: false}, q => {\n      // Catch all messages\n      q.bind('#');\n      // Receive messages\n      q.subscribe(message => _gotEvent({eventTime: Date.now(), message: message.data.toString('utf8')}))\n    })\n  });\n\nexport function addSession(token, data) {\n  _sessions[token] = data;\n}\n\nexport function getSession(token) {\n  return _sessions[token];\n}\n\nexport function addNotifier(type, cb) {\n  _notifiers[type].push(cb);\n}\n\nexport function getEvents() {\n  return Promise.resolve({ events });\n}\n\nexport default { addNotifier, addSession, getSession, getEvents };\n"]}